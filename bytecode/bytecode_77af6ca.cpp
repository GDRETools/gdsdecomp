// This file is automatically generated by `bytecode_generator.py`
// Do not edit this file directly, as it will be overwritten.
// Instead, edit `bytecode_generator.py` and run it to generate this file.

// clang-format off
#include "bytecode_77af6ca.h"

enum Token {
	TK_EMPTY,
	TK_ANNOTATION,
	TK_IDENTIFIER,
	TK_LITERAL,
	TK_OP_LESS,
	TK_OP_LESS_EQUAL,
	TK_OP_GREATER,
	TK_OP_GREATER_EQUAL,
	TK_OP_EQUAL,
	TK_OP_NOT_EQUAL,
	TK_OP_AND,
	TK_OP_OR,
	TK_OP_NOT,
	TK_AMPERSAND_AMPERSAND,
	TK_PIPE_PIPE,
	TK_BANG,
	TK_OP_BIT_AND,
	TK_OP_BIT_OR,
	TK_OP_BIT_INVERT,
	TK_OP_BIT_XOR,
	TK_OP_SHIFT_LEFT,
	TK_OP_SHIFT_RIGHT,
	TK_OP_ADD,
	TK_OP_SUB,
	TK_OP_MUL,
	TK_STAR_STAR,
	TK_OP_DIV,
	TK_OP_MOD,
	TK_OP_ASSIGN,
	TK_OP_ASSIGN_ADD,
	TK_OP_ASSIGN_SUB,
	TK_OP_ASSIGN_MUL,
	TK_STAR_STAR_EQUAL,
	TK_OP_ASSIGN_DIV,
	TK_OP_ASSIGN_MOD,
	TK_OP_ASSIGN_SHIFT_LEFT,
	TK_OP_ASSIGN_SHIFT_RIGHT,
	TK_OP_ASSIGN_BIT_AND,
	TK_OP_ASSIGN_BIT_OR,
	TK_OP_ASSIGN_BIT_XOR,
	TK_CF_IF,
	TK_CF_ELIF,
	TK_CF_ELSE,
	TK_CF_FOR,
	TK_CF_WHILE,
	TK_CF_BREAK,
	TK_CF_CONTINUE,
	TK_CF_PASS,
	TK_CF_RETURN,
	TK_CF_MATCH,
	TK_CF_WHEN,
	TK_PR_AS,
	TK_PR_ASSERT,
	TK_PR_AWAIT,
	TK_PR_BREAKPOINT,
	TK_PR_CLASS,
	TK_PR_CLASS_NAME,
	TK_PR_CONST,
	TK_PR_ENUM,
	TK_PR_EXTENDS,
	TK_PR_FUNCTION,
	TK_OP_IN,
	TK_PR_IS,
	TK_PR_NAMESPACE,
	TK_PR_PRELOAD,
	TK_SELF,
	TK_PR_SIGNAL,
	TK_PR_STATIC,
	TK_PR_SUPER,
	TK_PR_TRAIT,
	TK_PR_VAR,
	TK_PR_VOID,
	TK_PR_YIELD,
	TK_BRACKET_OPEN,
	TK_BRACKET_CLOSE,
	TK_CURLY_BRACKET_OPEN,
	TK_CURLY_BRACKET_CLOSE,
	TK_PARENTHESIS_OPEN,
	TK_PARENTHESIS_CLOSE,
	TK_COMMA,
	TK_SEMICOLON,
	TK_PERIOD,
	TK_PERIOD_PERIOD,
	TK_COLON,
	TK_DOLLAR,
	TK_FORWARD_ARROW,
	TK_UNDERSCORE,
	TK_NEWLINE,
	TK_INDENT,
	TK_DEDENT,
	TK_CONST_PI,
	TK_CONST_TAU,
	TK_CONST_INF,
	TK_CONST_NAN,
	TK_VCS_CONFLICT_MARKER,
	TK_BACKTICK,
	TK_QUESTION_MARK,
	TK_ERROR,
	TK_EOF,
	TK_MAX,
};

int GDScriptDecomp_77af6ca::get_token_max() const {
	return TK_MAX;
}

String GDScriptDecomp_77af6ca::get_function_name(int p_func) const {
    return "";
}
int GDScriptDecomp_77af6ca::get_function_count() const {
    return 0;
}
Pair<int, int> GDScriptDecomp_77af6ca::get_function_arg_count(int p_func) const {
    return Pair<int, int>(-1, -1);
}
int GDScriptDecomp_77af6ca::get_function_index(const String &p_func) const {
    return -1;
}
GDScriptDecomp::GlobalToken GDScriptDecomp_77af6ca::get_global_token(int p_token) const {
	if (p_token < 0 || p_token >= TK_MAX) {
		return GDScriptDecomp::GlobalToken::G_TK_MAX;
	}
	switch(Token(p_token)) {
		case TK_EMPTY: return GDScriptDecomp::GlobalToken::G_TK_EMPTY;
		case TK_ANNOTATION: return GDScriptDecomp::GlobalToken::G_TK_ANNOTATION;
		case TK_IDENTIFIER: return GDScriptDecomp::GlobalToken::G_TK_IDENTIFIER;
		case TK_LITERAL: return GDScriptDecomp::GlobalToken::G_TK_LITERAL;
		case TK_OP_LESS: return GDScriptDecomp::GlobalToken::G_TK_OP_LESS;
		case TK_OP_LESS_EQUAL: return GDScriptDecomp::GlobalToken::G_TK_OP_LESS_EQUAL;
		case TK_OP_GREATER: return GDScriptDecomp::GlobalToken::G_TK_OP_GREATER;
		case TK_OP_GREATER_EQUAL: return GDScriptDecomp::GlobalToken::G_TK_OP_GREATER_EQUAL;
		case TK_OP_EQUAL: return GDScriptDecomp::GlobalToken::G_TK_OP_EQUAL;
		case TK_OP_NOT_EQUAL: return GDScriptDecomp::GlobalToken::G_TK_OP_NOT_EQUAL;
		case TK_OP_AND: return GDScriptDecomp::GlobalToken::G_TK_OP_AND;
		case TK_OP_OR: return GDScriptDecomp::GlobalToken::G_TK_OP_OR;
		case TK_OP_NOT: return GDScriptDecomp::GlobalToken::G_TK_OP_NOT;
		case TK_AMPERSAND_AMPERSAND: return GDScriptDecomp::GlobalToken::G_TK_AMPERSAND_AMPERSAND;
		case TK_PIPE_PIPE: return GDScriptDecomp::GlobalToken::G_TK_PIPE_PIPE;
		case TK_BANG: return GDScriptDecomp::GlobalToken::G_TK_BANG;
		case TK_OP_BIT_AND: return GDScriptDecomp::GlobalToken::G_TK_OP_BIT_AND;
		case TK_OP_BIT_OR: return GDScriptDecomp::GlobalToken::G_TK_OP_BIT_OR;
		case TK_OP_BIT_INVERT: return GDScriptDecomp::GlobalToken::G_TK_OP_BIT_INVERT;
		case TK_OP_BIT_XOR: return GDScriptDecomp::GlobalToken::G_TK_OP_BIT_XOR;
		case TK_OP_SHIFT_LEFT: return GDScriptDecomp::GlobalToken::G_TK_OP_SHIFT_LEFT;
		case TK_OP_SHIFT_RIGHT: return GDScriptDecomp::GlobalToken::G_TK_OP_SHIFT_RIGHT;
		case TK_OP_ADD: return GDScriptDecomp::GlobalToken::G_TK_OP_ADD;
		case TK_OP_SUB: return GDScriptDecomp::GlobalToken::G_TK_OP_SUB;
		case TK_OP_MUL: return GDScriptDecomp::GlobalToken::G_TK_OP_MUL;
		case TK_STAR_STAR: return GDScriptDecomp::GlobalToken::G_TK_STAR_STAR;
		case TK_OP_DIV: return GDScriptDecomp::GlobalToken::G_TK_OP_DIV;
		case TK_OP_MOD: return GDScriptDecomp::GlobalToken::G_TK_OP_MOD;
		case TK_OP_ASSIGN: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN;
		case TK_OP_ASSIGN_ADD: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_ADD;
		case TK_OP_ASSIGN_SUB: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_SUB;
		case TK_OP_ASSIGN_MUL: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_MUL;
		case TK_STAR_STAR_EQUAL: return GDScriptDecomp::GlobalToken::G_TK_STAR_STAR_EQUAL;
		case TK_OP_ASSIGN_DIV: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_DIV;
		case TK_OP_ASSIGN_MOD: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_MOD;
		case TK_OP_ASSIGN_SHIFT_LEFT: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_SHIFT_LEFT;
		case TK_OP_ASSIGN_SHIFT_RIGHT: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_SHIFT_RIGHT;
		case TK_OP_ASSIGN_BIT_AND: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_BIT_AND;
		case TK_OP_ASSIGN_BIT_OR: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_BIT_OR;
		case TK_OP_ASSIGN_BIT_XOR: return GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_BIT_XOR;
		case TK_CF_IF: return GDScriptDecomp::GlobalToken::G_TK_CF_IF;
		case TK_CF_ELIF: return GDScriptDecomp::GlobalToken::G_TK_CF_ELIF;
		case TK_CF_ELSE: return GDScriptDecomp::GlobalToken::G_TK_CF_ELSE;
		case TK_CF_FOR: return GDScriptDecomp::GlobalToken::G_TK_CF_FOR;
		case TK_CF_WHILE: return GDScriptDecomp::GlobalToken::G_TK_CF_WHILE;
		case TK_CF_BREAK: return GDScriptDecomp::GlobalToken::G_TK_CF_BREAK;
		case TK_CF_CONTINUE: return GDScriptDecomp::GlobalToken::G_TK_CF_CONTINUE;
		case TK_CF_PASS: return GDScriptDecomp::GlobalToken::G_TK_CF_PASS;
		case TK_CF_RETURN: return GDScriptDecomp::GlobalToken::G_TK_CF_RETURN;
		case TK_CF_MATCH: return GDScriptDecomp::GlobalToken::G_TK_CF_MATCH;
		case TK_CF_WHEN: return GDScriptDecomp::GlobalToken::G_TK_CF_WHEN;
		case TK_PR_AS: return GDScriptDecomp::GlobalToken::G_TK_PR_AS;
		case TK_PR_ASSERT: return GDScriptDecomp::GlobalToken::G_TK_PR_ASSERT;
		case TK_PR_AWAIT: return GDScriptDecomp::GlobalToken::G_TK_PR_AWAIT;
		case TK_PR_BREAKPOINT: return GDScriptDecomp::GlobalToken::G_TK_PR_BREAKPOINT;
		case TK_PR_CLASS: return GDScriptDecomp::GlobalToken::G_TK_PR_CLASS;
		case TK_PR_CLASS_NAME: return GDScriptDecomp::GlobalToken::G_TK_PR_CLASS_NAME;
		case TK_PR_CONST: return GDScriptDecomp::GlobalToken::G_TK_PR_CONST;
		case TK_PR_ENUM: return GDScriptDecomp::GlobalToken::G_TK_PR_ENUM;
		case TK_PR_EXTENDS: return GDScriptDecomp::GlobalToken::G_TK_PR_EXTENDS;
		case TK_PR_FUNCTION: return GDScriptDecomp::GlobalToken::G_TK_PR_FUNCTION;
		case TK_OP_IN: return GDScriptDecomp::GlobalToken::G_TK_OP_IN;
		case TK_PR_IS: return GDScriptDecomp::GlobalToken::G_TK_PR_IS;
		case TK_PR_NAMESPACE: return GDScriptDecomp::GlobalToken::G_TK_PR_NAMESPACE;
		case TK_PR_PRELOAD: return GDScriptDecomp::GlobalToken::G_TK_PR_PRELOAD;
		case TK_SELF: return GDScriptDecomp::GlobalToken::G_TK_SELF;
		case TK_PR_SIGNAL: return GDScriptDecomp::GlobalToken::G_TK_PR_SIGNAL;
		case TK_PR_STATIC: return GDScriptDecomp::GlobalToken::G_TK_PR_STATIC;
		case TK_PR_SUPER: return GDScriptDecomp::GlobalToken::G_TK_PR_SUPER;
		case TK_PR_TRAIT: return GDScriptDecomp::GlobalToken::G_TK_PR_TRAIT;
		case TK_PR_VAR: return GDScriptDecomp::GlobalToken::G_TK_PR_VAR;
		case TK_PR_VOID: return GDScriptDecomp::GlobalToken::G_TK_PR_VOID;
		case TK_PR_YIELD: return GDScriptDecomp::GlobalToken::G_TK_PR_YIELD;
		case TK_BRACKET_OPEN: return GDScriptDecomp::GlobalToken::G_TK_BRACKET_OPEN;
		case TK_BRACKET_CLOSE: return GDScriptDecomp::GlobalToken::G_TK_BRACKET_CLOSE;
		case TK_CURLY_BRACKET_OPEN: return GDScriptDecomp::GlobalToken::G_TK_CURLY_BRACKET_OPEN;
		case TK_CURLY_BRACKET_CLOSE: return GDScriptDecomp::GlobalToken::G_TK_CURLY_BRACKET_CLOSE;
		case TK_PARENTHESIS_OPEN: return GDScriptDecomp::GlobalToken::G_TK_PARENTHESIS_OPEN;
		case TK_PARENTHESIS_CLOSE: return GDScriptDecomp::GlobalToken::G_TK_PARENTHESIS_CLOSE;
		case TK_COMMA: return GDScriptDecomp::GlobalToken::G_TK_COMMA;
		case TK_SEMICOLON: return GDScriptDecomp::GlobalToken::G_TK_SEMICOLON;
		case TK_PERIOD: return GDScriptDecomp::GlobalToken::G_TK_PERIOD;
		case TK_PERIOD_PERIOD: return GDScriptDecomp::GlobalToken::G_TK_PERIOD_PERIOD;
		case TK_COLON: return GDScriptDecomp::GlobalToken::G_TK_COLON;
		case TK_DOLLAR: return GDScriptDecomp::GlobalToken::G_TK_DOLLAR;
		case TK_FORWARD_ARROW: return GDScriptDecomp::GlobalToken::G_TK_FORWARD_ARROW;
		case TK_UNDERSCORE: return GDScriptDecomp::GlobalToken::G_TK_UNDERSCORE;
		case TK_NEWLINE: return GDScriptDecomp::GlobalToken::G_TK_NEWLINE;
		case TK_INDENT: return GDScriptDecomp::GlobalToken::G_TK_INDENT;
		case TK_DEDENT: return GDScriptDecomp::GlobalToken::G_TK_DEDENT;
		case TK_CONST_PI: return GDScriptDecomp::GlobalToken::G_TK_CONST_PI;
		case TK_CONST_TAU: return GDScriptDecomp::GlobalToken::G_TK_CONST_TAU;
		case TK_CONST_INF: return GDScriptDecomp::GlobalToken::G_TK_CONST_INF;
		case TK_CONST_NAN: return GDScriptDecomp::GlobalToken::G_TK_CONST_NAN;
		case TK_VCS_CONFLICT_MARKER: return GDScriptDecomp::GlobalToken::G_TK_VCS_CONFLICT_MARKER;
		case TK_BACKTICK: return GDScriptDecomp::GlobalToken::G_TK_BACKTICK;
		case TK_QUESTION_MARK: return GDScriptDecomp::GlobalToken::G_TK_QUESTION_MARK;
		case TK_ERROR: return GDScriptDecomp::GlobalToken::G_TK_ERROR;
		case TK_EOF: return GDScriptDecomp::GlobalToken::G_TK_EOF;
		case TK_MAX: return GDScriptDecomp::GlobalToken::G_TK_MAX;
		default: return GDScriptDecomp::GlobalToken::G_TK_MAX;
	}
	return GDScriptDecomp::GlobalToken::G_TK_MAX;
}

int GDScriptDecomp_77af6ca::get_local_token_val(GDScriptDecomp::GlobalToken p_token) const {
	switch(p_token) {
		case GDScriptDecomp::GlobalToken::G_TK_EMPTY: return (int) TK_EMPTY;
		case GDScriptDecomp::GlobalToken::G_TK_ANNOTATION: return (int) TK_ANNOTATION;
		case GDScriptDecomp::GlobalToken::G_TK_IDENTIFIER: return (int) TK_IDENTIFIER;
		case GDScriptDecomp::GlobalToken::G_TK_LITERAL: return (int) TK_LITERAL;
		case GDScriptDecomp::GlobalToken::G_TK_OP_LESS: return (int) TK_OP_LESS;
		case GDScriptDecomp::GlobalToken::G_TK_OP_LESS_EQUAL: return (int) TK_OP_LESS_EQUAL;
		case GDScriptDecomp::GlobalToken::G_TK_OP_GREATER: return (int) TK_OP_GREATER;
		case GDScriptDecomp::GlobalToken::G_TK_OP_GREATER_EQUAL: return (int) TK_OP_GREATER_EQUAL;
		case GDScriptDecomp::GlobalToken::G_TK_OP_EQUAL: return (int) TK_OP_EQUAL;
		case GDScriptDecomp::GlobalToken::G_TK_OP_NOT_EQUAL: return (int) TK_OP_NOT_EQUAL;
		case GDScriptDecomp::GlobalToken::G_TK_OP_AND: return (int) TK_OP_AND;
		case GDScriptDecomp::GlobalToken::G_TK_OP_OR: return (int) TK_OP_OR;
		case GDScriptDecomp::GlobalToken::G_TK_OP_NOT: return (int) TK_OP_NOT;
		case GDScriptDecomp::GlobalToken::G_TK_AMPERSAND_AMPERSAND: return (int) TK_AMPERSAND_AMPERSAND;
		case GDScriptDecomp::GlobalToken::G_TK_PIPE_PIPE: return (int) TK_PIPE_PIPE;
		case GDScriptDecomp::GlobalToken::G_TK_BANG: return (int) TK_BANG;
		case GDScriptDecomp::GlobalToken::G_TK_OP_BIT_AND: return (int) TK_OP_BIT_AND;
		case GDScriptDecomp::GlobalToken::G_TK_OP_BIT_OR: return (int) TK_OP_BIT_OR;
		case GDScriptDecomp::GlobalToken::G_TK_OP_BIT_INVERT: return (int) TK_OP_BIT_INVERT;
		case GDScriptDecomp::GlobalToken::G_TK_OP_BIT_XOR: return (int) TK_OP_BIT_XOR;
		case GDScriptDecomp::GlobalToken::G_TK_OP_SHIFT_LEFT: return (int) TK_OP_SHIFT_LEFT;
		case GDScriptDecomp::GlobalToken::G_TK_OP_SHIFT_RIGHT: return (int) TK_OP_SHIFT_RIGHT;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ADD: return (int) TK_OP_ADD;
		case GDScriptDecomp::GlobalToken::G_TK_OP_SUB: return (int) TK_OP_SUB;
		case GDScriptDecomp::GlobalToken::G_TK_OP_MUL: return (int) TK_OP_MUL;
		case GDScriptDecomp::GlobalToken::G_TK_STAR_STAR: return (int) TK_STAR_STAR;
		case GDScriptDecomp::GlobalToken::G_TK_OP_DIV: return (int) TK_OP_DIV;
		case GDScriptDecomp::GlobalToken::G_TK_OP_MOD: return (int) TK_OP_MOD;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN: return (int) TK_OP_ASSIGN;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_ADD: return (int) TK_OP_ASSIGN_ADD;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_SUB: return (int) TK_OP_ASSIGN_SUB;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_MUL: return (int) TK_OP_ASSIGN_MUL;
		case GDScriptDecomp::GlobalToken::G_TK_STAR_STAR_EQUAL: return (int) TK_STAR_STAR_EQUAL;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_DIV: return (int) TK_OP_ASSIGN_DIV;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_MOD: return (int) TK_OP_ASSIGN_MOD;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_SHIFT_LEFT: return (int) TK_OP_ASSIGN_SHIFT_LEFT;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_SHIFT_RIGHT: return (int) TK_OP_ASSIGN_SHIFT_RIGHT;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_BIT_AND: return (int) TK_OP_ASSIGN_BIT_AND;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_BIT_OR: return (int) TK_OP_ASSIGN_BIT_OR;
		case GDScriptDecomp::GlobalToken::G_TK_OP_ASSIGN_BIT_XOR: return (int) TK_OP_ASSIGN_BIT_XOR;
		case GDScriptDecomp::GlobalToken::G_TK_CF_IF: return (int) TK_CF_IF;
		case GDScriptDecomp::GlobalToken::G_TK_CF_ELIF: return (int) TK_CF_ELIF;
		case GDScriptDecomp::GlobalToken::G_TK_CF_ELSE: return (int) TK_CF_ELSE;
		case GDScriptDecomp::GlobalToken::G_TK_CF_FOR: return (int) TK_CF_FOR;
		case GDScriptDecomp::GlobalToken::G_TK_CF_WHILE: return (int) TK_CF_WHILE;
		case GDScriptDecomp::GlobalToken::G_TK_CF_BREAK: return (int) TK_CF_BREAK;
		case GDScriptDecomp::GlobalToken::G_TK_CF_CONTINUE: return (int) TK_CF_CONTINUE;
		case GDScriptDecomp::GlobalToken::G_TK_CF_PASS: return (int) TK_CF_PASS;
		case GDScriptDecomp::GlobalToken::G_TK_CF_RETURN: return (int) TK_CF_RETURN;
		case GDScriptDecomp::GlobalToken::G_TK_CF_MATCH: return (int) TK_CF_MATCH;
		case GDScriptDecomp::GlobalToken::G_TK_CF_WHEN: return (int) TK_CF_WHEN;
		case GDScriptDecomp::GlobalToken::G_TK_PR_AS: return (int) TK_PR_AS;
		case GDScriptDecomp::GlobalToken::G_TK_PR_ASSERT: return (int) TK_PR_ASSERT;
		case GDScriptDecomp::GlobalToken::G_TK_PR_AWAIT: return (int) TK_PR_AWAIT;
		case GDScriptDecomp::GlobalToken::G_TK_PR_BREAKPOINT: return (int) TK_PR_BREAKPOINT;
		case GDScriptDecomp::GlobalToken::G_TK_PR_CLASS: return (int) TK_PR_CLASS;
		case GDScriptDecomp::GlobalToken::G_TK_PR_CLASS_NAME: return (int) TK_PR_CLASS_NAME;
		case GDScriptDecomp::GlobalToken::G_TK_PR_CONST: return (int) TK_PR_CONST;
		case GDScriptDecomp::GlobalToken::G_TK_PR_ENUM: return (int) TK_PR_ENUM;
		case GDScriptDecomp::GlobalToken::G_TK_PR_EXTENDS: return (int) TK_PR_EXTENDS;
		case GDScriptDecomp::GlobalToken::G_TK_PR_FUNCTION: return (int) TK_PR_FUNCTION;
		case GDScriptDecomp::GlobalToken::G_TK_OP_IN: return (int) TK_OP_IN;
		case GDScriptDecomp::GlobalToken::G_TK_PR_IS: return (int) TK_PR_IS;
		case GDScriptDecomp::GlobalToken::G_TK_PR_NAMESPACE: return (int) TK_PR_NAMESPACE;
		case GDScriptDecomp::GlobalToken::G_TK_PR_PRELOAD: return (int) TK_PR_PRELOAD;
		case GDScriptDecomp::GlobalToken::G_TK_SELF: return (int) TK_SELF;
		case GDScriptDecomp::GlobalToken::G_TK_PR_SIGNAL: return (int) TK_PR_SIGNAL;
		case GDScriptDecomp::GlobalToken::G_TK_PR_STATIC: return (int) TK_PR_STATIC;
		case GDScriptDecomp::GlobalToken::G_TK_PR_SUPER: return (int) TK_PR_SUPER;
		case GDScriptDecomp::GlobalToken::G_TK_PR_TRAIT: return (int) TK_PR_TRAIT;
		case GDScriptDecomp::GlobalToken::G_TK_PR_VAR: return (int) TK_PR_VAR;
		case GDScriptDecomp::GlobalToken::G_TK_PR_VOID: return (int) TK_PR_VOID;
		case GDScriptDecomp::GlobalToken::G_TK_PR_YIELD: return (int) TK_PR_YIELD;
		case GDScriptDecomp::GlobalToken::G_TK_BRACKET_OPEN: return (int) TK_BRACKET_OPEN;
		case GDScriptDecomp::GlobalToken::G_TK_BRACKET_CLOSE: return (int) TK_BRACKET_CLOSE;
		case GDScriptDecomp::GlobalToken::G_TK_CURLY_BRACKET_OPEN: return (int) TK_CURLY_BRACKET_OPEN;
		case GDScriptDecomp::GlobalToken::G_TK_CURLY_BRACKET_CLOSE: return (int) TK_CURLY_BRACKET_CLOSE;
		case GDScriptDecomp::GlobalToken::G_TK_PARENTHESIS_OPEN: return (int) TK_PARENTHESIS_OPEN;
		case GDScriptDecomp::GlobalToken::G_TK_PARENTHESIS_CLOSE: return (int) TK_PARENTHESIS_CLOSE;
		case GDScriptDecomp::GlobalToken::G_TK_COMMA: return (int) TK_COMMA;
		case GDScriptDecomp::GlobalToken::G_TK_SEMICOLON: return (int) TK_SEMICOLON;
		case GDScriptDecomp::GlobalToken::G_TK_PERIOD: return (int) TK_PERIOD;
		case GDScriptDecomp::GlobalToken::G_TK_PERIOD_PERIOD: return (int) TK_PERIOD_PERIOD;
		case GDScriptDecomp::GlobalToken::G_TK_COLON: return (int) TK_COLON;
		case GDScriptDecomp::GlobalToken::G_TK_DOLLAR: return (int) TK_DOLLAR;
		case GDScriptDecomp::GlobalToken::G_TK_FORWARD_ARROW: return (int) TK_FORWARD_ARROW;
		case GDScriptDecomp::GlobalToken::G_TK_UNDERSCORE: return (int) TK_UNDERSCORE;
		case GDScriptDecomp::GlobalToken::G_TK_NEWLINE: return (int) TK_NEWLINE;
		case GDScriptDecomp::GlobalToken::G_TK_INDENT: return (int) TK_INDENT;
		case GDScriptDecomp::GlobalToken::G_TK_DEDENT: return (int) TK_DEDENT;
		case GDScriptDecomp::GlobalToken::G_TK_CONST_PI: return (int) TK_CONST_PI;
		case GDScriptDecomp::GlobalToken::G_TK_CONST_TAU: return (int) TK_CONST_TAU;
		case GDScriptDecomp::GlobalToken::G_TK_CONST_INF: return (int) TK_CONST_INF;
		case GDScriptDecomp::GlobalToken::G_TK_CONST_NAN: return (int) TK_CONST_NAN;
		case GDScriptDecomp::GlobalToken::G_TK_VCS_CONFLICT_MARKER: return (int) TK_VCS_CONFLICT_MARKER;
		case GDScriptDecomp::GlobalToken::G_TK_BACKTICK: return (int) TK_BACKTICK;
		case GDScriptDecomp::GlobalToken::G_TK_QUESTION_MARK: return (int) TK_QUESTION_MARK;
		case GDScriptDecomp::GlobalToken::G_TK_ERROR: return (int) TK_ERROR;
		case GDScriptDecomp::GlobalToken::G_TK_EOF: return (int) TK_EOF;
		case GDScriptDecomp::GlobalToken::G_TK_MAX: return (int) TK_MAX;
		default: return -1;
	}
	return -1;
}

